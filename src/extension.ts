// The module 'vscode' contains the VS Code extensibility API
// Import the module and reference it with the alias vscode in your code below
import * as vscode from 'vscode';
import QRCode = require('qrcode');
import { ImgurClient } from 'imgur';
import jsQR from "jsqr";
const lzw = require("node-lzw");
var jimp = require("jimp");
const client = new ImgurClient({ clientId: 'be05dae43f90d96' });

// this method is called when your extension is activated
// your extension is activated the very first time the command is executed
export function activate(context: vscode.ExtensionContext) {
	// The command has been defined in the package.json file
	// Now provide the implementation of the command with registerCommand
	// The commandId parameter must match the command field in package.json
	let disposable = vscode.commands.registerCommand('qrshared.shareCode', () => {
		// The code you place here will be executed every time your command is executed
		// Display a message box to the user

		// Get the selected text
		const editor = vscode.window.activeTextEditor;
		if (!editor) {
			return; // No open text editor
		}
		// print the selected text
		const selection = editor.selection;
		const text = editor.document.getText(selection);
		if (text.length === 0) {
			return;
		}
		const compressedText = lzw.encode(Buffer.from(text, 'utf-8').toString());

		// Convert the text to QR code
		QRCode.toDataURL(compressedText, { errorCorrectionLevel: 'L' }, async function (err: any, url: any) {
			if (err) {
				vscode.window.showInformationMessage('QRshared: Error generating QR code, too long data');
				return;
			}
			// open the QR code in a new tab as an image with request
			const response = await client.upload({
				image: url.replace(/^data:image\/png;base64,/, ''),
				title: 'QRshared',
				description: 'QR code generated by QRshared extension'
			});
			// get the link to the image
			const link = response.data.link;
			if (!link) {
				vscode.window.showInformationMessage('QRshared: Error generating QR code, too long data');
				return;
			}
			vscode.env.clipboard.writeText(link);
			vscode.window.showInformationMessage('QRshared: QR code copied to clipboard!');
		});
	});


	let disposable2 = vscode.commands.registerCommand('qrshared.receiveCode', () => {
		vscode.window.showInputBox({
			placeHolder: 'Enter the link to the QR code',
			ignoreFocusOut: true
		}).then((link) => {
			console.log(link);
			if (!link || !link.startsWith('https://i.imgur.com/')) {
				vscode.window.showInformationMessage("QRshared: bad link format !");
				return;
			}
			jimp.read(link).then(async (image: any) => {
				const result = jsQR(
					new Uint8ClampedArray(image.bitmap.data),
					image.bitmap.width,
					image.bitmap.height,
				);
				if (!result) {
					vscode.window.showInformationMessage("QRshared: bad QR code !");
					return;
				}
				const decodedText = lzw.decode(result.data);
				vscode.env.clipboard.writeText(decodedText);
				vscode.window.showInformationMessage('QRShared: Text copied to clipboard!');
			}).catch((err: any) => {
				console.error("Read error", err);
				vscode.window.showInformationMessage("QRshared: bad QR code !");
			});
		});
	});

	context.subscriptions.push(disposable, disposable2);
}

// this method is called when your extension is deactivated
export function deactivate() { }
